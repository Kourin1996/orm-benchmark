// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Kourin1996/orm-benchmark/ent/models"
	"github.com/Kourin1996/orm-benchmark/ent/predicate"
)

// ModelsUpdate is the builder for updating Models entities.
type ModelsUpdate struct {
	config
	hooks    []Hook
	mutation *ModelsMutation
}

// Where adds a new predicate for the ModelsUpdate builder.
func (mu *ModelsUpdate) Where(ps ...predicate.Models) *ModelsUpdate {
	mu.mutation.predicates = append(mu.mutation.predicates, ps...)
	return mu
}

// SetName sets the "name" field.
func (mu *ModelsUpdate) SetName(s string) *ModelsUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetTitle sets the "title" field.
func (mu *ModelsUpdate) SetTitle(s string) *ModelsUpdate {
	mu.mutation.SetTitle(s)
	return mu
}

// SetFax sets the "fax" field.
func (mu *ModelsUpdate) SetFax(s string) *ModelsUpdate {
	mu.mutation.SetFax(s)
	return mu
}

// SetWeb sets the "web" field.
func (mu *ModelsUpdate) SetWeb(s string) *ModelsUpdate {
	mu.mutation.SetWeb(s)
	return mu
}

// SetAge sets the "age" field.
func (mu *ModelsUpdate) SetAge(i int) *ModelsUpdate {
	mu.mutation.ResetAge()
	mu.mutation.SetAge(i)
	return mu
}

// AddAge adds i to the "age" field.
func (mu *ModelsUpdate) AddAge(i int) *ModelsUpdate {
	mu.mutation.AddAge(i)
	return mu
}

// SetRight sets the "right" field.
func (mu *ModelsUpdate) SetRight(b bool) *ModelsUpdate {
	mu.mutation.SetRight(b)
	return mu
}

// SetCounter sets the "counter" field.
func (mu *ModelsUpdate) SetCounter(i int64) *ModelsUpdate {
	mu.mutation.ResetCounter()
	mu.mutation.SetCounter(i)
	return mu
}

// AddCounter adds i to the "counter" field.
func (mu *ModelsUpdate) AddCounter(i int64) *ModelsUpdate {
	mu.mutation.AddCounter(i)
	return mu
}

// Mutation returns the ModelsMutation object of the builder.
func (mu *ModelsUpdate) Mutation() *ModelsMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *ModelsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mu.hooks) == 0 {
		if err = mu.check(); err != nil {
			return 0, err
		}
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ModelsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mu.check(); err != nil {
				return 0, err
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *ModelsUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *ModelsUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *ModelsUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *ModelsUpdate) check() error {
	if v, ok := mu.mutation.Name(); ok {
		if err := models.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := mu.mutation.Title(); ok {
		if err := models.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := mu.mutation.Fax(); ok {
		if err := models.FaxValidator(v); err != nil {
			return &ValidationError{Name: "fax", err: fmt.Errorf("ent: validator failed for field \"fax\": %w", err)}
		}
	}
	if v, ok := mu.mutation.Web(); ok {
		if err := models.WebValidator(v); err != nil {
			return &ValidationError{Name: "web", err: fmt.Errorf("ent: validator failed for field \"web\": %w", err)}
		}
	}
	return nil
}

func (mu *ModelsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   models.Table,
			Columns: models.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: models.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: models.FieldName,
		})
	}
	if value, ok := mu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: models.FieldTitle,
		})
	}
	if value, ok := mu.mutation.Fax(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: models.FieldFax,
		})
	}
	if value, ok := mu.mutation.Web(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: models.FieldWeb,
		})
	}
	if value, ok := mu.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: models.FieldAge,
		})
	}
	if value, ok := mu.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: models.FieldAge,
		})
	}
	if value, ok := mu.mutation.Right(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: models.FieldRight,
		})
	}
	if value, ok := mu.mutation.Counter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: models.FieldCounter,
		})
	}
	if value, ok := mu.mutation.AddedCounter(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: models.FieldCounter,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{models.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ModelsUpdateOne is the builder for updating a single Models entity.
type ModelsUpdateOne struct {
	config
	hooks    []Hook
	mutation *ModelsMutation
}

// SetName sets the "name" field.
func (muo *ModelsUpdateOne) SetName(s string) *ModelsUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetTitle sets the "title" field.
func (muo *ModelsUpdateOne) SetTitle(s string) *ModelsUpdateOne {
	muo.mutation.SetTitle(s)
	return muo
}

// SetFax sets the "fax" field.
func (muo *ModelsUpdateOne) SetFax(s string) *ModelsUpdateOne {
	muo.mutation.SetFax(s)
	return muo
}

// SetWeb sets the "web" field.
func (muo *ModelsUpdateOne) SetWeb(s string) *ModelsUpdateOne {
	muo.mutation.SetWeb(s)
	return muo
}

// SetAge sets the "age" field.
func (muo *ModelsUpdateOne) SetAge(i int) *ModelsUpdateOne {
	muo.mutation.ResetAge()
	muo.mutation.SetAge(i)
	return muo
}

// AddAge adds i to the "age" field.
func (muo *ModelsUpdateOne) AddAge(i int) *ModelsUpdateOne {
	muo.mutation.AddAge(i)
	return muo
}

// SetRight sets the "right" field.
func (muo *ModelsUpdateOne) SetRight(b bool) *ModelsUpdateOne {
	muo.mutation.SetRight(b)
	return muo
}

// SetCounter sets the "counter" field.
func (muo *ModelsUpdateOne) SetCounter(i int64) *ModelsUpdateOne {
	muo.mutation.ResetCounter()
	muo.mutation.SetCounter(i)
	return muo
}

// AddCounter adds i to the "counter" field.
func (muo *ModelsUpdateOne) AddCounter(i int64) *ModelsUpdateOne {
	muo.mutation.AddCounter(i)
	return muo
}

// Mutation returns the ModelsMutation object of the builder.
func (muo *ModelsUpdateOne) Mutation() *ModelsMutation {
	return muo.mutation
}

// Save executes the query and returns the updated Models entity.
func (muo *ModelsUpdateOne) Save(ctx context.Context) (*Models, error) {
	var (
		err  error
		node *Models
	)
	if len(muo.hooks) == 0 {
		if err = muo.check(); err != nil {
			return nil, err
		}
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ModelsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = muo.check(); err != nil {
				return nil, err
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *ModelsUpdateOne) SaveX(ctx context.Context) *Models {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *ModelsUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *ModelsUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *ModelsUpdateOne) check() error {
	if v, ok := muo.mutation.Name(); ok {
		if err := models.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := muo.mutation.Title(); ok {
		if err := models.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := muo.mutation.Fax(); ok {
		if err := models.FaxValidator(v); err != nil {
			return &ValidationError{Name: "fax", err: fmt.Errorf("ent: validator failed for field \"fax\": %w", err)}
		}
	}
	if v, ok := muo.mutation.Web(); ok {
		if err := models.WebValidator(v); err != nil {
			return &ValidationError{Name: "web", err: fmt.Errorf("ent: validator failed for field \"web\": %w", err)}
		}
	}
	return nil
}

func (muo *ModelsUpdateOne) sqlSave(ctx context.Context) (_node *Models, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   models.Table,
			Columns: models.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: models.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Models.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: models.FieldName,
		})
	}
	if value, ok := muo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: models.FieldTitle,
		})
	}
	if value, ok := muo.mutation.Fax(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: models.FieldFax,
		})
	}
	if value, ok := muo.mutation.Web(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: models.FieldWeb,
		})
	}
	if value, ok := muo.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: models.FieldAge,
		})
	}
	if value, ok := muo.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: models.FieldAge,
		})
	}
	if value, ok := muo.mutation.Right(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: models.FieldRight,
		})
	}
	if value, ok := muo.mutation.Counter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: models.FieldCounter,
		})
	}
	if value, ok := muo.mutation.AddedCounter(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: models.FieldCounter,
		})
	}
	_node = &Models{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{models.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
