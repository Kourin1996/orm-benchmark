// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Kourin1996/orm-benchmark/ent/models"
)

// Models is the model entity for the Models schema.
type Models struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Fax holds the value of the "fax" field.
	Fax string `json:"fax,omitempty"`
	// Web holds the value of the "web" field.
	Web string `json:"web,omitempty"`
	// Age holds the value of the "age" field.
	Age int `json:"age,omitempty"`
	// Right holds the value of the "right" field.
	Right bool `json:"right,omitempty"`
	// Counter holds the value of the "counter" field.
	Counter int64 `json:"counter,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Models) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case models.FieldRight:
			values[i] = &sql.NullBool{}
		case models.FieldID, models.FieldAge, models.FieldCounter:
			values[i] = &sql.NullInt64{}
		case models.FieldName, models.FieldTitle, models.FieldFax, models.FieldWeb:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Models", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Models fields.
func (m *Models) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case models.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case models.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				m.Name = value.String
			}
		case models.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				m.Title = value.String
			}
		case models.FieldFax:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fax", values[i])
			} else if value.Valid {
				m.Fax = value.String
			}
		case models.FieldWeb:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field web", values[i])
			} else if value.Valid {
				m.Web = value.String
			}
		case models.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				m.Age = int(value.Int64)
			}
		case models.FieldRight:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field right", values[i])
			} else if value.Valid {
				m.Right = value.Bool
			}
		case models.FieldCounter:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field counter", values[i])
			} else if value.Valid {
				m.Counter = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Models.
// Note that you need to call Models.Unwrap() before calling this method if this Models
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Models) Update() *ModelsUpdateOne {
	return (&ModelsClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Models entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Models) Unwrap() *Models {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Models is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Models) String() string {
	var builder strings.Builder
	builder.WriteString("Models(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", name=")
	builder.WriteString(m.Name)
	builder.WriteString(", title=")
	builder.WriteString(m.Title)
	builder.WriteString(", fax=")
	builder.WriteString(m.Fax)
	builder.WriteString(", web=")
	builder.WriteString(m.Web)
	builder.WriteString(", age=")
	builder.WriteString(fmt.Sprintf("%v", m.Age))
	builder.WriteString(", right=")
	builder.WriteString(fmt.Sprintf("%v", m.Right))
	builder.WriteString(", counter=")
	builder.WriteString(fmt.Sprintf("%v", m.Counter))
	builder.WriteByte(')')
	return builder.String()
}

// ModelsSlice is a parsable slice of Models.
type ModelsSlice []*Models

func (m ModelsSlice) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
