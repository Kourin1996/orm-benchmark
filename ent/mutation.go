// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/Kourin1996/orm-benchmark/ent/models"
	"github.com/Kourin1996/orm-benchmark/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeModels = "Models"
)

// ModelsMutation represents an operation that mutates the Models nodes in the graph.
type ModelsMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	title         *string
	fax           *string
	web           *string
	age           *int
	addage        *int
	right         *bool
	counter       *int64
	addcounter    *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Models, error)
	predicates    []predicate.Models
}

var _ ent.Mutation = (*ModelsMutation)(nil)

// modelsOption allows management of the mutation configuration using functional options.
type modelsOption func(*ModelsMutation)

// newModelsMutation creates new mutation for the Models entity.
func newModelsMutation(c config, op Op, opts ...modelsOption) *ModelsMutation {
	m := &ModelsMutation{
		config:        c,
		op:            op,
		typ:           TypeModels,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withModelsID sets the ID field of the mutation.
func withModelsID(id int) modelsOption {
	return func(m *ModelsMutation) {
		var (
			err   error
			once  sync.Once
			value *Models
		)
		m.oldValue = func(ctx context.Context) (*Models, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Models.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withModels sets the old Models of the mutation.
func withModels(node *Models) modelsOption {
	return func(m *ModelsMutation) {
		m.oldValue = func(context.Context) (*Models, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ModelsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ModelsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ModelsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *ModelsMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ModelsMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Models entity.
// If the Models object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModelsMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ModelsMutation) ResetName() {
	m.name = nil
}

// SetTitle sets the "title" field.
func (m *ModelsMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ModelsMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Models entity.
// If the Models object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModelsMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *ModelsMutation) ResetTitle() {
	m.title = nil
}

// SetFax sets the "fax" field.
func (m *ModelsMutation) SetFax(s string) {
	m.fax = &s
}

// Fax returns the value of the "fax" field in the mutation.
func (m *ModelsMutation) Fax() (r string, exists bool) {
	v := m.fax
	if v == nil {
		return
	}
	return *v, true
}

// OldFax returns the old "fax" field's value of the Models entity.
// If the Models object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModelsMutation) OldFax(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFax is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFax requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFax: %w", err)
	}
	return oldValue.Fax, nil
}

// ResetFax resets all changes to the "fax" field.
func (m *ModelsMutation) ResetFax() {
	m.fax = nil
}

// SetWeb sets the "web" field.
func (m *ModelsMutation) SetWeb(s string) {
	m.web = &s
}

// Web returns the value of the "web" field in the mutation.
func (m *ModelsMutation) Web() (r string, exists bool) {
	v := m.web
	if v == nil {
		return
	}
	return *v, true
}

// OldWeb returns the old "web" field's value of the Models entity.
// If the Models object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModelsMutation) OldWeb(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWeb is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWeb requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeb: %w", err)
	}
	return oldValue.Web, nil
}

// ResetWeb resets all changes to the "web" field.
func (m *ModelsMutation) ResetWeb() {
	m.web = nil
}

// SetAge sets the "age" field.
func (m *ModelsMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the value of the "age" field in the mutation.
func (m *ModelsMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old "age" field's value of the Models entity.
// If the Models object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModelsMutation) OldAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to the "age" field.
func (m *ModelsMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the "age" field in this mutation.
func (m *ModelsMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ResetAge resets all changes to the "age" field.
func (m *ModelsMutation) ResetAge() {
	m.age = nil
	m.addage = nil
}

// SetRight sets the "right" field.
func (m *ModelsMutation) SetRight(b bool) {
	m.right = &b
}

// Right returns the value of the "right" field in the mutation.
func (m *ModelsMutation) Right() (r bool, exists bool) {
	v := m.right
	if v == nil {
		return
	}
	return *v, true
}

// OldRight returns the old "right" field's value of the Models entity.
// If the Models object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModelsMutation) OldRight(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRight: %w", err)
	}
	return oldValue.Right, nil
}

// ResetRight resets all changes to the "right" field.
func (m *ModelsMutation) ResetRight() {
	m.right = nil
}

// SetCounter sets the "counter" field.
func (m *ModelsMutation) SetCounter(i int64) {
	m.counter = &i
	m.addcounter = nil
}

// Counter returns the value of the "counter" field in the mutation.
func (m *ModelsMutation) Counter() (r int64, exists bool) {
	v := m.counter
	if v == nil {
		return
	}
	return *v, true
}

// OldCounter returns the old "counter" field's value of the Models entity.
// If the Models object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModelsMutation) OldCounter(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCounter is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCounter requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCounter: %w", err)
	}
	return oldValue.Counter, nil
}

// AddCounter adds i to the "counter" field.
func (m *ModelsMutation) AddCounter(i int64) {
	if m.addcounter != nil {
		*m.addcounter += i
	} else {
		m.addcounter = &i
	}
}

// AddedCounter returns the value that was added to the "counter" field in this mutation.
func (m *ModelsMutation) AddedCounter() (r int64, exists bool) {
	v := m.addcounter
	if v == nil {
		return
	}
	return *v, true
}

// ResetCounter resets all changes to the "counter" field.
func (m *ModelsMutation) ResetCounter() {
	m.counter = nil
	m.addcounter = nil
}

// Op returns the operation name.
func (m *ModelsMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Models).
func (m *ModelsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ModelsMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.name != nil {
		fields = append(fields, models.FieldName)
	}
	if m.title != nil {
		fields = append(fields, models.FieldTitle)
	}
	if m.fax != nil {
		fields = append(fields, models.FieldFax)
	}
	if m.web != nil {
		fields = append(fields, models.FieldWeb)
	}
	if m.age != nil {
		fields = append(fields, models.FieldAge)
	}
	if m.right != nil {
		fields = append(fields, models.FieldRight)
	}
	if m.counter != nil {
		fields = append(fields, models.FieldCounter)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ModelsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case models.FieldName:
		return m.Name()
	case models.FieldTitle:
		return m.Title()
	case models.FieldFax:
		return m.Fax()
	case models.FieldWeb:
		return m.Web()
	case models.FieldAge:
		return m.Age()
	case models.FieldRight:
		return m.Right()
	case models.FieldCounter:
		return m.Counter()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ModelsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case models.FieldName:
		return m.OldName(ctx)
	case models.FieldTitle:
		return m.OldTitle(ctx)
	case models.FieldFax:
		return m.OldFax(ctx)
	case models.FieldWeb:
		return m.OldWeb(ctx)
	case models.FieldAge:
		return m.OldAge(ctx)
	case models.FieldRight:
		return m.OldRight(ctx)
	case models.FieldCounter:
		return m.OldCounter(ctx)
	}
	return nil, fmt.Errorf("unknown Models field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ModelsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case models.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case models.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case models.FieldFax:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFax(v)
		return nil
	case models.FieldWeb:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeb(v)
		return nil
	case models.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	case models.FieldRight:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRight(v)
		return nil
	case models.FieldCounter:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCounter(v)
		return nil
	}
	return fmt.Errorf("unknown Models field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ModelsMutation) AddedFields() []string {
	var fields []string
	if m.addage != nil {
		fields = append(fields, models.FieldAge)
	}
	if m.addcounter != nil {
		fields = append(fields, models.FieldCounter)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ModelsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case models.FieldAge:
		return m.AddedAge()
	case models.FieldCounter:
		return m.AddedCounter()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ModelsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case models.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	case models.FieldCounter:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCounter(v)
		return nil
	}
	return fmt.Errorf("unknown Models numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ModelsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ModelsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ModelsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Models nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ModelsMutation) ResetField(name string) error {
	switch name {
	case models.FieldName:
		m.ResetName()
		return nil
	case models.FieldTitle:
		m.ResetTitle()
		return nil
	case models.FieldFax:
		m.ResetFax()
		return nil
	case models.FieldWeb:
		m.ResetWeb()
		return nil
	case models.FieldAge:
		m.ResetAge()
		return nil
	case models.FieldRight:
		m.ResetRight()
		return nil
	case models.FieldCounter:
		m.ResetCounter()
		return nil
	}
	return fmt.Errorf("unknown Models field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ModelsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ModelsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ModelsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ModelsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ModelsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ModelsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ModelsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Models unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ModelsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Models edge %s", name)
}
